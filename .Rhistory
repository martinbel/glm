lift <- tbl[1,1] / sum(validation$Clase == 1)
data.frame(F1=F1, sensitividad=sensitividad, especificidad=especificidad, accuracy=accuracy, lift=lift)
}
metricas(tbl)
tbl
sum(tbl[,1])
library(ROCR)
pred <- prediction(1-probs, test$Clase)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC Curve", colorize=T)
pred <- prediction(probs, test$Clase)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC Curve", colorize=T)
probs
pred <- prediction(probs, test$Clase)
str(pred)
pred@cutoffs
str(pred)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC Curve", colorize=T)
pred <- prediction(probs, test$Clase)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC Curve", colorize=T)
?performance
roc_perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(roc_perf, main="ROC Curve", colorize=T)
plot(ss_perf, measure="sens", x.measure="spec")
ss_perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(ss_perf, measure="sens", x.measure="spec")
ss_perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(ss_perf, measure="sens", x.measure="spec")
plot(ss_perf, measure="prec", x.measure="rec")
plot(ss_perf, measure="prbe")
plot(ss_perf, measure="lift", x.measure="f")
plot(ss_perf, x.measure="f")
ss_perf <- performance(pred, measure="f", x.measure="auc")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="f")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, x.measure="f")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="auc", x.measure="f")
plot(ss_perf, colorize=T)
ss_perf
ss_perf <- performance(pred, measure="auc")
ss_perf
ss_perf <- performance(pred, measure="auc", x.measure="tpr")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="f1", x.measure="tpr")
ss_perf <- performance(pred, measure="f", x.measure="tpr")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="sens", x.measure="spec")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="ppv", x.measure="npv")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="ppv", x.measure="tpr")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="ppv", x.measure="fpr")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="npv", x.measure="ppv")
plot(ss_perf, colorize=T)
ss_perf <- performance(pred, measure="npv")
ss_perf
plot(ss_perf, colorize=T)
lift_pred <- prediction(probs, test$Clase)
perf_lift <- performance(lift_pred, measure="lift", x.measure="rpp")
plot(perf_lift, main="lift curve", colorize=T)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(l1tf)
install_github("hadley/l1tf")
devtools::install_github("hadley/l1tf")
library('l1tf')
plot(snp500, type = "l")
data(snp500)
library('l1tf')
data(snp500)
snp500
ls()
help('l1tf')
x <- runif(1000)
plot(x)
lines(l1tf(x), col = "red")
lines(l1tf(x, prop = 0.01), col = "blue")
plot(sp500$date, log(sp500$log), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), lambda=100), col="blue")
lines(sp500$date, l1tf(log(sp500$raw), lambda=100), col="blue")
lines(sp500$date, l1tf(log(sp500$raw), lambda=100), col="blue")
plot(sp500$date, l1tf(log(sp500$raw), lambda=100), col="blue")
lines(sp500$date, log(sp500$log), type="l", col="grey50", ylab="log-price")
plot(sp500$date, log(sp500$log), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), lambda=100), col="blue")
l1tf(log(sp500$raw), lambda=100)
l1tf1 <- l1tf(log(sp500$raw), lambda=100)
lines(sp500$date, l1tf, col="blue")
length(l1tf1)
length(sp500$date)
head(l1tf1)
lines(sp500$date, log(l1tf), col="blue")
plot(sp500$date, log(sp500$log), type="l", col="grey50", ylab="log-price")
lines(sp500$date, log(l1tf), col="blue")
log(l1tf)
log(l1tf1)
lines(sp500$date, log(l1tf1), col="blue")
plot(sp500$date, log(sp500$log), type="l", col="grey50", ylab="log-price")
lines(sp500$date, log(l1tf1), col="blue")
plot(snp500, type = "l")
lines(sp500$date, log(lines(l1tf(snp500, lambda = 50), col = "red")), col="blue")
plot(sp500$date, log(sp500$log), type="l", col="grey50", ylab="log-price")
lines(sp500$date, log(lines(l1tf(snp500, lambda = 50), col = "red")), col="blue")
sp500$log
lines(sp500$date, lines(l1tf(snp500$log, lambda = 50), col = "red"), col="blue")
plot(sp500$date, sp500$log, type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(snp500$log, lambda = 50), col="blue")
l1tf(snp500$log, lambda = 50)
snp500$log
library('l1tf')
l1tf(snp500$log, lambda = 50)
traceback()
?l1tf
lines(sp500$date, l1tf(log(sp500$raw), lambda=100), col="blue")
sp500$raw
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), lambda=100), col="blue")
lines(sp500$date, l1tf(log(sp500$raw), lambda=10), col="blue")
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), lambda=10), col="blue")
lines(sp500$date, l1tf(log(sp500$raw), lambda=1), col="blue")
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), lambda=1), col="blue")
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), lambda=10), col="blue")
par(mfrow=c(3, 1))
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), prop=1), col="blue")
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), prop=0.5), col="blue")
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), prop=0), col="blue")
for(prop in seq(0, 1, 0.1)){
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), prop=prop), col="blue")
}
plot.l1tf <- function(x){
lapply(x, function(x){
plot(sp500$date, log(sp500$raw), type="l", col="grey50", ylab="log-price")
lines(sp500$date, l1tf(log(sp500$raw), prop=x), col="blue")
})
}
par(mfrow=c(3, 1))
plot.l1tf(c(0, 0.1, 0.2))
plot.l1tf(seq(0.3, 0.5, 0.1))
plot.l1tf(c(0, 0.1, 0.2))
glmnet::cv.glmnet
getmin
glmnet::getmin
seq
seq(10)
seq
l1tf
cvstuff
glmnet:::cvstuff
glmnet::cvstuff
glmnet::cvm
`glmnet::auc`
glmnet::auc
?auc
auc
glmnet::auc
rprob
glmnet::rprob
glmnet:::rprob
head(probs)
glmnet::auc
probs[,1]
probs
probs[1,]
probs
as.vector(probs)
glmnet::auc(test$Clase, as.vector(probs))
test$Clase
glmnet::auc(as.numeric(as.character(test$Clase)), as.vector(probs))
head(probs)
glmnet::auc
y <- as.numeric(as.character(test$Clase))
prob <- as.vector(probs)
rprob = rank(prob)
rprob
n1 = sum(y)
n1
n0 = length(y) - n1
n0
sum(rprob[y == 1])
n1
n1 * (n1 + 1)/2
sum(rprob[y == 1]) - n1 * (n1 + 1)/2
sum(rprob[y == 1])
rprob[y == 1]
u = sum(rprob[y == 1]) - n1 * (n1 + 1)/2
u/(n1 * n0)
u
u/(n1 * n0)
library(pROC)
data(aSAH)
auc(aSAH$outcome, aSAH$s100b)
aSAH$s100b
aSAH$outcome
y = aSAH$outcome
prob = aSAH$s100b
rprob = rank(prob)
n1 = sum(y)
n0 = length(y) - n1
u = sum(rprob[y == 1]) - n1 * (n1 + 1)/2
u/(n1 * n0)
auc(aSAH$outcome, aSAH$s100b)
data(aSAH)
head(aSAH)
?auc
devtools::install_github("tdhock/WeightedROC")
library(WeightedROC)
example(WeightedROC)
install.packages(microbenchmark)
install.packages('microbenchmark')
example(WeightedROC)
example(WeightedAUC)
library(glmnet)
rbind(`glmnet::auc`=c(unequal.weights=glmnet::auc(y, y.hat, w),
no.weights=glmnet::auc(y, y.hat),
equal.weights=glmnet::auc(y, y.hat, rep(1, length(y)))),
`WeightedROC::WeightedAUC`=c(wauc,
WeightedAUC(WeightedROC(y.hat, y)),
WeightedAUC(WeightedROC(y.hat, y, rep(1, length(y))))))
y <- c(-1, -1, 1, -1, 1)
y.hat <- c(1, 2, 3, 4, 5)
w <- c(1, 1, 1, 4, 5)
rbind(`glmnet::auc`=c(unequal.weights=glmnet::auc(y, y.hat, w),
no.weights=glmnet::auc(y, y.hat),
equal.weights=glmnet::auc(y, y.hat, rep(1, length(y)))),
`WeightedROC::WeightedAUC`=c(WeightedAUC(WeightedROC(y.hat, y, w)),
WeightedAUC(WeightedROC(y.hat, y)),
WeightedAUC(WeightedROC(y.hat, y, rep(1, length(y))))))
WeightedROC::WeightedAUC
WeightedAUC
?WeightedAUC
y <- c(-1, -1, 1, 1, 1)
w <- c(1, 1, 1, 4, 5)
y <- c(-1, -1, 1, 1, 1)
w <- c(1, 1, 1, 1, 1)
y.hat <- c(1, 2, 3, 1, 1)
tp.fp <- WeightedROC(y.hat, y, w)
wauc <- WeightedAUC(tp.fp)
tp.fp
wauc
y <- c(-1, -1, 1, 1, 1)
w <- c(1, 1, 1, 1, 1)
y.hat <- c(0.01, 0.02, 0.6, 0.7, 0.4)
tp.fp <- WeightedROC(y.hat, y, w)
wauc <- WeightedAUC(tp.fp)
wauc
wauc
y <- c(-1, -1, 1, 1, 1)
w <- c(1, 1, 1, 1, 1)
y.hat <- c(0.01, 0.02, 0.6, 0.7, 0.1)
tp.fp <- WeightedROC(y.hat, y, w)
wauc <- WeightedAUC(tp.fp)
wauc
y <- c(-1, -1, 1, 1, 1, -1)
w <- c(1, 1, 1, 1, 1, 1)
y.hat <- c(0.01, 0.02, 0.6, 0.7, 0.1, 0.9)
tp.fp <- WeightedROC(y.hat, y, w)
wauc <- WeightedAUC(tp.fp)
wauc
wauc
WeightedAUC(tp.fp)
tp.fp
tp.fp <- WeightedROC(y.hat, y, w)
tp.fp
WeightedROC
WeightedROC(y.hat, y, w)
plot(tp.fp)
par(mfrow=c(1,1))
plot(tp.fp)
WeightedROC
pROC::auc
pROC::auc(y ~ y.hat)
pROC::auc(y ~ y.hat, data=data.frame(y,t.hat))
pROC::auc(y ~ y.hat, data=data.frame(y,y.hat))
wauc
auc
glmnet::auc(y, y.hat)
glmnet::auc(y, y.hat, w)
glmnet::auc(y, y.hat, w)
glmnet::auc
rprob = rank(y.hat)
n1 = sum(y)
n0 = length(y) - n1
u = sum(rprob[y == 1]) - n1 * (n1 + 1)/2
u/(n1 * n0)
n1 * n0
n0
n1
n1 = sum(y)
y
glmnet::auc
y <- c(-1, -1, 1, 1, 1, -1, 1)
w <- c(1, 1, 1, 1, 1, 1, 1)
y.hat <- c(0.01, 0.02, 0.6, 0.7, 0.1, 0.9, 0.8)
y.hat <- c(0.01, 0.02, 0.6, 0.7, 0.1, 0.9, 0.8)
rprob = rank(y.hat)
n1 = sum(y)
n1
n0 = length(y) - n1
u = sum(rprob[y == 1]) - n1 * (n1 + 1)/2
u/(n1 * n0)
y <- c(0, 0, 1, 1, 1, 0)
rprob = rank(y.hat)
n1 = sum(y)
n1
n0 = length(y) - n1
n0
u = sum(rprob[y == 1]) - n1 * (n1 + 1)/2
u/(n1 * n0)
clase_10pct
pred <- factor(ifelse(probs > qt_90[[1]], 1, 0), levels=c(1, 0))
tbl <- table(pred, test$Clase)
tbl
tbl
pred <- prediction(probs, test$Clase)
roc_perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(roc_perf, main="ROC Curve", colorize=T)
perf_lift <- performance(pred, measure="lift", x.measure="rpp")
plot(perf_lift, main="lift curve", colorize=T)
summary(fwd)
par(mfrow=c(2,2))
plot(fwd)
par(mfrow=c(1,1))
str(fwd)
hist(residuals(fwd))
names(fwd)
cooks.distance(fwd)
cooks <- cooks.distance(fwd)
quantile(cooks)
hist(cook)
hist(cooks)
quantile(cooks)
quantile(cooks, seq(0,1,0.1))
quantile(cooks, seq(0,1,0.01))
quantile(cooks, seq(0.9,1,0.001))
cooks[cooks > 0.00225178437]
which(cooks[cooks > 0.00225178437])
cook_drop <- cooks > 0.00225178437
which(cook_drop)
cook_drop
which(cook_drop==T)
cooks[cook_drop]
names(cooks[cook_drop])
as.numeric(names(cooks[cook_drop]))
cook_drop <- as.numeric(names(cooks[cook_drop]))
train[cook_drop, ]
d[cook_drop, ]
length(cooks)
dim(train)
train[cook_drop, ]
cook_drop
cooks[cooks > 0.00225178437]
length(cooks)
max(row.names(train))
max(as.numeric(row.names(train)))
dim(train)
length(cooks)
cooks[cooks > 0.00225178437]
inx_t <- as.numeric(row.names(train))
inx_t[cooks > 0.00225178437]
train[cook_drop, ]
cook_drop
cooks[cooks > 0.00225178437]
names(cooks[cooks > 0.00225178437])
train[names(cooks[cooks > 0.00225178437]), ]
names(cooks[cooks > 0.00225178437])
drop_rows <- names(cooks[cooks > 0.00225178437])
d
drop_rows <- names(cooks[cooks > 0.00225178437])
drop_rows
train[names(cooks[cooks > 0.00225178437]), ]
quantile(cooks, seq(0.9,1,0.001))
quantile(cooks, seq(0.9,1,0.0001))
train[names(cooks[cooks > 0.00583435808]), ]
train[names(cooks[cooks > 0.00225178437]), ]
train[!names(cooks[cooks > 0.00225178437]), ]
train[names(cooks[cooks > 0.00225178437]), ]
train[names(cooks[cooks > 0.00225178437]), ]
quantile(cooks, seq(0.9,1,0.0001))
quantile(cooks, seq(0.9,1,0.001))
quantile(cooks, seq(0.9,1,0.01))
drop_rows <- names(cooks[cooks > 0.00065237178])
train[drop_rows, ]
par(mfrow=c(2,2))
plot(fwd)
par(mfrow=c(1,1))
quantile(cooks, seq(0.9,1,0.01))
hist(cooks)
hist(cooks, breaks=100)
hist(cooks, breaks=1000)
hist(cooks, breaks=10)
hist(cooks, breaks=1)
hist(cooks, breaks=5)
hist(log(cooks), breaks=5)
hist(cooks[cooks < 0.5])
hist(cooks[cooks < 0.02])
quantile(cooks, seq(0.9,1,0.01))
hist(cooks[cooks < 0.00065237178])
?cooks.distance
imI <- influence.measures(fwd)
summary(imI)
plot(imI)
cooks.distance
stats::cooks.distance
stats::cooks.distance.default
stats::cooks.distance.glm
UseMethod("cooks.distance")
ShowMethods("cooks.distance")
ShowMethod("cooks.distance")
cooks <- cooks.distance(fwd)
hist(cooks[cooks < 0.00065237178])
hist(cooks[cooks > 0.00065237178])
hist(cooks[cooks < 1])
quantile(cooks, seq(0.9,1,0.01))
hosmer.lemeshow
??hosmer
install.packages('ResourceSelection')
fwd$y
hl <- hoslem.test(fwd$y, fitted(fwd), g=10)
library('ResourceSelection')
hl <- hoslem.test(fwd$y, fitted(fwd), g=10)
hl
cbind(hl$observed,hl$expected)
hl
hl$observed
hl$expected
cbind(hl$observed,hl$expected)
hl
hoslem.test(fwd$y, fitted(fwd), g=10)
fitted(fwd)
1-fitted(fwd)
hl <- hoslem.test(fwd$y, 1-fitted(fwd), g=10)
hl
cbind(hl$observed,hl$expected)
hl <- hoslem.test(fwd$y, fitted(fwd), g=10)
cbind(hl$observed,hl$expected)
hl
hoslem.test
install.packages('MKmisc')
library('MKmisc')
fitted(fwd)
HLgof.test(fit = fitted(fwd), obs = fwd$y)
head(pred)
head(preds)
head(probs)
table(pred)
head(pred)
pred <- factor(ifelse(probs > qt_90[[1]], 1, 0), levels=c(1, 0))
tbl <- table(pred, test$Clase)
tbl
HLgof.test(fit = pred, obs = y_test)
HLgof.test(fit = probs, obs = test$Clase)
HLgof.test(fit = probs, obs = fwd$y)
prob_test <- predict(fwd, train, type='response')
HLgof.test(fit = prob_test, obs = fwd$y)
hl <- hoslem.test(fwd$y, prob_test, g=10)
hl
prob_test <- 1-predict(fwd, train, type='response')
HLgof.test(fit = prob_test, obs = fwd$y)
prob_test <- predict(fwd, train, type='response')
quantile(prob_test)
prob_test <- 1 - predict(fwd, train, type='response')
HLgof.test(fit = prob_test, obs = fwd$y)
hl <- HLgof.test(fit = prob_test, obs = fwd$y)
hl
str(hl)
cbind(hl$observed,hl$expected)
cbind(H$hl$observed,H$hl$expected)
cbind(hl$H$observed,hl$H$expected)
hl$H$observed
hl$H
names(hl$H)
hl$H$observed
hl$H$expected
names(hl)
hl <- hoslem.test(fwd$y, prob_test, g=10)
cbind(hl$observed,hl$expected)
str(hl)
names(hl)
hl$observed
hl$expected
hl <- hoslem.test(fwd$y, fitted(fwd), g=10)
hl
fitted
?fitted
glmnet::auc(as.numeric(as.character(test$Clase)), as.vector(probs))
y <- as.numeric(as.character(test$Clase))
prob <- as.vector(probs)
rprob = rank(prob)
n1 = sum(y)
n0 = length(y) - n1
u = sum(rprob[y == 1]) - n1 * (n1 + 1)/2
u/(n1 * n0)
pROC::auc(y, prob)
roc(y, prob)
plot.roc(y, prob)
plot.roc(y, prob)
save('glm_resultados.RData')
save.image('glm_resultados.RData')
